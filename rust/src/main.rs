#[path = "变量与常量.rs"]
mod 变量与常量;
#[path = "基础语法.rs"]
mod 基础语法;
#[path = "数据类型.rs"]
mod 数据类型;
#[path = "模式匹配.rs"]
mod 模式匹配;
#[path = "泛型与特征.rs"]
mod 泛型与特征;

fn main() {
    // 变量声明
    变量与常量::变量的绑定();
    变量与常量::变量的可变和不可变声明();
    // 变量使用过程中需要注意的点
    变量与常量::使用下划线开头忽略未使用的变量();
    变量与常量::变量遮蔽();
    // 常量
    变量与常量::常量的绑定();

    // 基础类型
    数据类型::基础类型();
    // 运算
    数据类型::数值运算();
    数据类型::位运算();
    // 函数
    基础语法::函数();

    // 基础类型使用过程中需要注意的点
    数据类型::数字类型不同进制表示();
    数据类型::浮点数精度问题();
    数据类型::NaN();
    数据类型::使用As完成类型转换();

    // 复杂类型
    数据类型::复杂类型();
    // 使用复杂类型中需要注意的点
    数据类型::通过参数创建结构体的简化语法();
    数据类型::通过已有结构体实例创建新实例的简化语法();
    数据类型::用于空值处理的枚举Option();
    数据类型::创建非基本类型重复元素的数组初始化();

    // 流程控制
    基础语法::流程控制();
    基础语法::集合元素循环遍历中的所有权转移();
    基础语法::loop循环搭配break的表达式();

    // 模式匹配
    模式匹配::基本使用场景();

    // 模式匹配中需要特殊注意的点
    模式匹配::matches宏的使用();

    // 方法，用来实现结构体行为的函数就是方法
    基础语法::方法();
    基础语法::结构体可以定义多个impl();
    基础语法::枚举也可以定义impl();

    // 泛型和特征
    泛型与特征::泛型语法();
    泛型与特征::特征的基本使用();
    泛型与特征::特征约束();
    泛型与特征::特征对象();

    泛型与特征::函数可以返回impl_trait();
}
